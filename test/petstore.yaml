swagger: "2.0"
info:
  version: 1.0.0
  title: Swagger Petstore
  license:
    name: MIT
basePath: /v1
consumes:
  - application/json
produces:
  - application/json
paths:
  /pets:
    get:
      summary: List all pets
      operationId: listPets
      tags:
        - pets
      security:
        - app: []
        - customer: []
        - apiKey: []
        - basic: []

      parameters:
        - name: limit
          in: query
          description: How many items to return at one time (max 100)
          required: false
          type: integer
          format: int32
      responses:
        200:
          description: An paged array of pets
          headers:
            x-next:
              type: string
              description: A link to the next page of responses
          schema:
            $ref: '#/definitions/Pets'
          examples:
            application/json:
              - { "id": 4, "name": "George" }
              - { "id": 5, "name": "Katie" }
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      summary: Create a pet
      operationId: createPets
      tags:
        - pets
      security:
        - customer: []
        - basic: []
      parameters:
        - name: payload
          in: body
          required: true
          schema:
            $ref: '#/definitions/Pet'
      responses:
        201:
          description: Null response
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /pets/{id}:
    get:
      summary: Info for a specific pet
      #operationId: showPetById
      tags:
        - pets
      security:
        - app: []
        - customer: []
        - apiKey: []
        - basic: []
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the pet to retrieve
          type: string
      responses:
        200:
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/Pet'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /recursive:
    get:
      responses:
        200:
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/Node'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

  /not-for-monkeys:
    get:
      operationId: notForMonkeys
      x-monkey-ignore: true
      responses:
        200:
          description: Expected response to a valid request
          schema:
            $ref: '#/definitions/Node'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  Pet:
    required:
      - id
      - name
    properties:
      id:
        type: integer
        format: int64
        example: 4
      name:
        type: string
        example: Lissy
      tag:
        type: string
        example: Big
  Pets:
    type: array
    items:
      $ref: '#/definitions/Pet'
    example:
      - { "id": 666, "name": "Beast" }
      - { "id": 27, "name": "Bolero" }
  Node:
    required:
      - id
    properties:
      id:
        type: integer
        format: int64
        example: 4
      children:
        type: array
        items:
          $ref: '#/definitions/Node'
  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string

securityDefinitions:
  app:
    type: oauth2
    flow: application
    tokenUrl: http://localhost:8001/v1/oauth2/token
    scopes:
      pets: Kittens lol
  customer:
    type: oauth2
    flow: password
    tokenUrl: http://localhost:8001/v1/oauth2/token
  web:
    type: oauth2
    flow: implicit
    authorizationUrl: http://localhost:8001/v1/oauth2/authorize
  secure:
    type: oauth2
    flow: accessCode
    authorizationUrl: http://localhost:8001/v1/oauth2/authorize
    tokenUrl: http://localhost:8001/v1/oauth2/token
  apiKey:
    type: apiKey
    name: X-Api-Key
    in: header
  basic:
    type: basic
